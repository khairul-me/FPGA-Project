`timescale 1ns / 1ps

module blinky(
    input CLK12MHZ,
    input btn,                          
    output reg led0, led1, led2, led3,  
    output reg ext_led,                 
    output reg ext_led2,                
    output reg ext_led3,                
    output reg pwm_led,                 
    output reg pot_led,                 
    
    // XADC Pins
    input wire VAUXP6,                  
    input wire VAUXN6                   
);

// Counter for LED blinking
reg [24:0] count = 0;

// Debounce logic for the button
reg [15:0] debounce_counter = 0;
reg btn_stable = 0;

// PWM registers
reg [7:0] pwm_counter = 0;
reg [7:0] pot_pwm_counter = 0;
reg [7:0] pot_duty_cycle = 0;

// XADC signals
wire busy_out;            
wire [4:0] channel_out;   
wire eoc_out;            
wire eos_out;            
wire [15:0] adc_data;

// Instantiate XADC
xadc_wiz_1 XADC_INST (
    .dclk_in(CLK12MHZ),           
    .reset_in(1'b0),              
    .vauxp6(VAUXP6),              
    .vauxn6(VAUXN6),              
    .busy_out(busy_out),          
    .channel_out(channel_out),    
    .eoc_out(eoc_out),           
    .eos_out(eos_out),           
    .vp_in(1'b0),                
    .vn_in(1'b0),
    .alarm_out(),
    .vccint_alarm_out(),
    .vccaux_alarm_out(),
    .user_temp_alarm_out(),
    .ot_out()
);

// Debouncing: Capture stable button state
always @(posedge CLK12MHZ) begin
    if (btn == btn_stable)
        debounce_counter <= 0;
    else if (debounce_counter == 16'hFFFF)
        btn_stable <= btn;
    else
        debounce_counter <= debounce_counter + 1;
end

// LED Blinking and Button-controlled LED logic
always @(posedge CLK12MHZ) begin
    count <= count + 1;
    
    // Onboard LEDs blink at a slower rate
    led0 <= count[24];
    led1 <= count[24];
    led2 <= count[24];
    led3 <= count[24];
    
    // External LED toggles on button press
    if (btn_stable) 
        ext_led <= ~ext_led;
    
    // External LEDs blink at different rates
    ext_led2 <= count[23];  
    ext_led3 <= count[22];  
end

// Fixed PWM LED
always @(posedge CLK12MHZ) begin
    pwm_counter <= pwm_counter + 1;
    pwm_led <= (pwm_counter < 128);  // Fixed 50% duty cycle
end

// Potentiometer-controlled LED with PWM
always @(posedge CLK12MHZ) begin
    // Update duty cycle from ADC reading when conversion completes
    if (eoc_out && channel_out == 5'b10110) begin  // Channel 6
        pot_duty_cycle <= adc_data[15:8];    // Use upper 8 bits of ADC value
    end
    
    // Generate PWM for potentiometer LED
    pot_pwm_counter <= pot_pwm_counter + 1;
    pot_led <= (pot_pwm_counter < pot_duty_cycle);
end

endmodule
